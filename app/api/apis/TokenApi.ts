/* tslint:disable */
/* eslint-disable */
/**
 * Turnero TAIE API
 * API correspondiente al trabajo final \"Turnero TAIE\", realizado por los alumnos Juan Manuel Villarreal y Ghilino Ramiro
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRefreshToken,
  BadRequest,
  GoogleAccessTokenRequest,
  InternalServerError,
  RefreshTokenRequest,
  ReturnAuthUser,
  ReturnRefreshToken,
} from '../models/index';
import {
    BadRefreshTokenFromJSON,
    BadRefreshTokenToJSON,
    BadRequestFromJSON,
    BadRequestToJSON,
    GoogleAccessTokenRequestFromJSON,
    GoogleAccessTokenRequestToJSON,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    RefreshTokenRequestFromJSON,
    RefreshTokenRequestToJSON,
    ReturnAuthUserFromJSON,
    ReturnAuthUserToJSON,
    ReturnRefreshTokenFromJSON,
    ReturnRefreshTokenToJSON,
} from '../models/index';

export interface TokenAuthCreateRequest {
    googleAccessTokenRequest: GoogleAccessTokenRequest;
}

export interface TokenRefreshCreateRequest {
    refreshTokenRequest: RefreshTokenRequest;
}

/**
 * 
 */
export class TokenApi extends runtime.BaseAPI {

    /**
     * This endpoint works recieving an access_token generated by Google.          The endpoint check if access_token is valid and retrieves account information, then check if user exist with email recieved and returns user information, a JWT and a Refresh Token.         If user does not exist, the endpoint creates a new student user and returns the information, a JWT and a Refresh Token
     * Authentication Endpoint
     */
    async tokenAuthCreateRaw(requestParameters: TokenAuthCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnAuthUser>> {
        if (requestParameters.googleAccessTokenRequest === null || requestParameters.googleAccessTokenRequest === undefined) {
            throw new runtime.RequiredError('googleAccessTokenRequest','Required parameter requestParameters.googleAccessTokenRequest was null or undefined when calling tokenAuthCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/token/auth/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleAccessTokenRequestToJSON(requestParameters.googleAccessTokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnAuthUserFromJSON(jsonValue));
    }

    /**
     * This endpoint works recieving an access_token generated by Google.          The endpoint check if access_token is valid and retrieves account information, then check if user exist with email recieved and returns user information, a JWT and a Refresh Token.         If user does not exist, the endpoint creates a new student user and returns the information, a JWT and a Refresh Token
     * Authentication Endpoint
     */
    async tokenAuthCreate(requestParameters: TokenAuthCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnAuthUser> {
        const response = await this.tokenAuthCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint works recieving an refresh token generated after using the Authentication endpoint.          The endpoint check if refresh token is valid and returns a new JWT and a new refresh token
     * Refresh JWT Endpoint
     */
    async tokenRefreshCreateRaw(requestParameters: TokenRefreshCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnRefreshToken>> {
        if (requestParameters.refreshTokenRequest === null || requestParameters.refreshTokenRequest === undefined) {
            throw new runtime.RequiredError('refreshTokenRequest','Required parameter requestParameters.refreshTokenRequest was null or undefined when calling tokenRefreshCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/token/refresh/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshTokenRequestToJSON(requestParameters.refreshTokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnRefreshTokenFromJSON(jsonValue));
    }

    /**
     * This endpoint works recieving an refresh token generated after using the Authentication endpoint.          The endpoint check if refresh token is valid and returns a new JWT and a new refresh token
     * Refresh JWT Endpoint
     */
    async tokenRefreshCreate(requestParameters: TokenRefreshCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnRefreshToken> {
        const response = await this.tokenRefreshCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
