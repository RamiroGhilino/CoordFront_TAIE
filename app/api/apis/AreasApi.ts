/* tslint:disable */
/* eslint-disable */
/**
 * Turnero TAIE API
 * API correspondiente al trabajo final \"Turnero TAIE\", realizado por los alumnos Juan Manuel Villarreal y Ghilino Ramiro
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Area,
  AreaRequest,
  PatchedAreaRequest,
} from '../models/index';
import {
    AreaFromJSON,
    AreaToJSON,
    AreaRequestFromJSON,
    AreaRequestToJSON,
    PatchedAreaRequestFromJSON,
    PatchedAreaRequestToJSON,
} from '../models/index';

export interface AreasCreateRequest {
    areaRequest: AreaRequest;
}

export interface AreasDestroyRequest {
    id: number;
}

export interface AreasPartialUpdateRequest {
    id: number;
    patchedAreaRequest?: PatchedAreaRequest;
}

export interface AreasRetrieveRequest {
    id: number;
}

export interface AreasUpdateRequest {
    id: number;
    areaRequest: AreaRequest;
}

/**
 * 
 */
export class AreasApi extends runtime.BaseAPI {

    /**
     */
    async areasCreateRaw(requestParameters: AreasCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Area>> {
        if (requestParameters.areaRequest === null || requestParameters.areaRequest === undefined) {
            throw new runtime.RequiredError('areaRequest','Required parameter requestParameters.areaRequest was null or undefined when calling areasCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/areas/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AreaRequestToJSON(requestParameters.areaRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AreaFromJSON(jsonValue));
    }

    /**
     */
    async areasCreate(requestParameters: AreasCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Area> {
        const response = await this.areasCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async areasDestroyRaw(requestParameters: AreasDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling areasDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/areas/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async areasDestroy(requestParameters: AreasDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.areasDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async areasListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Area>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/areas/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AreaFromJSON));
    }

    /**
     */
    async areasList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Area>> {
        const response = await this.areasListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async areasPartialUpdateRaw(requestParameters: AreasPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Area>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling areasPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/areas/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAreaRequestToJSON(requestParameters.patchedAreaRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AreaFromJSON(jsonValue));
    }

    /**
     */
    async areasPartialUpdate(requestParameters: AreasPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Area> {
        const response = await this.areasPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async areasRetrieveRaw(requestParameters: AreasRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Area>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling areasRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/areas/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AreaFromJSON(jsonValue));
    }

    /**
     */
    async areasRetrieve(requestParameters: AreasRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Area> {
        const response = await this.areasRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async areasUpdateRaw(requestParameters: AreasUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Area>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling areasUpdate.');
        }

        if (requestParameters.areaRequest === null || requestParameters.areaRequest === undefined) {
            throw new runtime.RequiredError('areaRequest','Required parameter requestParameters.areaRequest was null or undefined when calling areasUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/areas/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AreaRequestToJSON(requestParameters.areaRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AreaFromJSON(jsonValue));
    }

    /**
     */
    async areasUpdate(requestParameters: AreasUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Area> {
        const response = await this.areasUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
