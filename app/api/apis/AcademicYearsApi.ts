/* tslint:disable */
/* eslint-disable */
/**
 * Turnero TAIE API
 * API correspondiente al trabajo final \"Turnero TAIE\", realizado por los alumnos Juan Manuel Villarreal y Ghilino Ramiro
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AcademicYear,
  AcademicYearRequest,
  PatchedAcademicYearRequest,
} from '../models/index';
import {
    AcademicYearFromJSON,
    AcademicYearToJSON,
    AcademicYearRequestFromJSON,
    AcademicYearRequestToJSON,
    PatchedAcademicYearRequestFromJSON,
    PatchedAcademicYearRequestToJSON,
} from '../models/index';

export interface AcademicYearsCreateRequest {
    academicYearRequest: AcademicYearRequest;
}

export interface AcademicYearsDestroyRequest {
    year: number;
}

export interface AcademicYearsPartialUpdateRequest {
    year: number;
    patchedAcademicYearRequest?: PatchedAcademicYearRequest;
}

export interface AcademicYearsRetrieveRequest {
    year: number;
}

export interface AcademicYearsUpdateRequest {
    year: number;
    academicYearRequest: AcademicYearRequest;
}

/**
 * 
 */
export class AcademicYearsApi extends runtime.BaseAPI {

    /**
     */
    async academicYearsCreateRaw(requestParameters: AcademicYearsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AcademicYear>> {
        if (requestParameters.academicYearRequest === null || requestParameters.academicYearRequest === undefined) {
            throw new runtime.RequiredError('academicYearRequest','Required parameter requestParameters.academicYearRequest was null or undefined when calling academicYearsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/academic-years/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AcademicYearRequestToJSON(requestParameters.academicYearRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcademicYearFromJSON(jsonValue));
    }

    /**
     */
    async academicYearsCreate(requestParameters: AcademicYearsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AcademicYear> {
        const response = await this.academicYearsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async academicYearsDestroyRaw(requestParameters: AcademicYearsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.year === null || requestParameters.year === undefined) {
            throw new runtime.RequiredError('year','Required parameter requestParameters.year was null or undefined when calling academicYearsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/academic-years/{year}/`.replace(`{${"year"}}`, encodeURIComponent(String(requestParameters.year))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async academicYearsDestroy(requestParameters: AcademicYearsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.academicYearsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async academicYearsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AcademicYear>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/academic-years/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AcademicYearFromJSON));
    }

    /**
     */
    async academicYearsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AcademicYear>> {
        const response = await this.academicYearsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async academicYearsPartialUpdateRaw(requestParameters: AcademicYearsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AcademicYear>> {
        if (requestParameters.year === null || requestParameters.year === undefined) {
            throw new runtime.RequiredError('year','Required parameter requestParameters.year was null or undefined when calling academicYearsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/academic-years/{year}/`.replace(`{${"year"}}`, encodeURIComponent(String(requestParameters.year))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAcademicYearRequestToJSON(requestParameters.patchedAcademicYearRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcademicYearFromJSON(jsonValue));
    }

    /**
     */
    async academicYearsPartialUpdate(requestParameters: AcademicYearsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AcademicYear> {
        const response = await this.academicYearsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async academicYearsRetrieveRaw(requestParameters: AcademicYearsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AcademicYear>> {
        if (requestParameters.year === null || requestParameters.year === undefined) {
            throw new runtime.RequiredError('year','Required parameter requestParameters.year was null or undefined when calling academicYearsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/academic-years/{year}/`.replace(`{${"year"}}`, encodeURIComponent(String(requestParameters.year))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcademicYearFromJSON(jsonValue));
    }

    /**
     */
    async academicYearsRetrieve(requestParameters: AcademicYearsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AcademicYear> {
        const response = await this.academicYearsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async academicYearsUpdateRaw(requestParameters: AcademicYearsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AcademicYear>> {
        if (requestParameters.year === null || requestParameters.year === undefined) {
            throw new runtime.RequiredError('year','Required parameter requestParameters.year was null or undefined when calling academicYearsUpdate.');
        }

        if (requestParameters.academicYearRequest === null || requestParameters.academicYearRequest === undefined) {
            throw new runtime.RequiredError('academicYearRequest','Required parameter requestParameters.academicYearRequest was null or undefined when calling academicYearsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/academic-years/{year}/`.replace(`{${"year"}}`, encodeURIComponent(String(requestParameters.year))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AcademicYearRequestToJSON(requestParameters.academicYearRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcademicYearFromJSON(jsonValue));
    }

    /**
     */
    async academicYearsUpdate(requestParameters: AcademicYearsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AcademicYear> {
        const response = await this.academicYearsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
