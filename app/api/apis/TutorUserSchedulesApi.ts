/* tslint:disable */
/* eslint-disable */
/**
 * Turnero TAIE API
 * API correspondiente al trabajo final \"Turnero TAIE\", realizado por los alumnos Juan Manuel Villarreal y Ghilino Ramiro
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDeleteTutorUserSchedule,
  CreateDeleteTutorUserScheduleRequest,
  PatchedCreateDeleteTutorUserScheduleRequest,
  ReadTutorUserSchedule,
} from '../models/index';
import {
    CreateDeleteTutorUserScheduleFromJSON,
    CreateDeleteTutorUserScheduleToJSON,
    CreateDeleteTutorUserScheduleRequestFromJSON,
    CreateDeleteTutorUserScheduleRequestToJSON,
    PatchedCreateDeleteTutorUserScheduleRequestFromJSON,
    PatchedCreateDeleteTutorUserScheduleRequestToJSON,
    ReadTutorUserScheduleFromJSON,
    ReadTutorUserScheduleToJSON,
} from '../models/index';

export interface TutorUserSchedulesCreateRequest {
    createDeleteTutorUserScheduleRequest: CreateDeleteTutorUserScheduleRequest;
}

export interface TutorUserSchedulesDestroyRequest {
    id: number;
}

export interface TutorUserSchedulesPartialUpdateRequest {
    id: number;
    patchedCreateDeleteTutorUserScheduleRequest?: PatchedCreateDeleteTutorUserScheduleRequest;
}

export interface TutorUserSchedulesRetrieveRequest {
    id: number;
}

export interface TutorUserSchedulesUpdateRequest {
    id: number;
    createDeleteTutorUserScheduleRequest: CreateDeleteTutorUserScheduleRequest;
}

/**
 * 
 */
export class TutorUserSchedulesApi extends runtime.BaseAPI {

    /**
     */
    async tutorUserSchedulesCreateRaw(requestParameters: TutorUserSchedulesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateDeleteTutorUserSchedule>> {
        if (requestParameters.createDeleteTutorUserScheduleRequest === null || requestParameters.createDeleteTutorUserScheduleRequest === undefined) {
            throw new runtime.RequiredError('createDeleteTutorUserScheduleRequest','Required parameter requestParameters.createDeleteTutorUserScheduleRequest was null or undefined when calling tutorUserSchedulesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutor-user-schedules/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeleteTutorUserScheduleRequestToJSON(requestParameters.createDeleteTutorUserScheduleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateDeleteTutorUserScheduleFromJSON(jsonValue));
    }

    /**
     */
    async tutorUserSchedulesCreate(requestParameters: TutorUserSchedulesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateDeleteTutorUserSchedule> {
        const response = await this.tutorUserSchedulesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorUserSchedulesDestroyRaw(requestParameters: TutorUserSchedulesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tutorUserSchedulesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutor-user-schedules/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tutorUserSchedulesDestroy(requestParameters: TutorUserSchedulesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tutorUserSchedulesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tutorUserSchedulesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ReadTutorUserSchedule>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutor-user-schedules/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReadTutorUserScheduleFromJSON));
    }

    /**
     */
    async tutorUserSchedulesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ReadTutorUserSchedule>> {
        const response = await this.tutorUserSchedulesListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorUserSchedulesPartialUpdateRaw(requestParameters: TutorUserSchedulesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateDeleteTutorUserSchedule>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tutorUserSchedulesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutor-user-schedules/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCreateDeleteTutorUserScheduleRequestToJSON(requestParameters.patchedCreateDeleteTutorUserScheduleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateDeleteTutorUserScheduleFromJSON(jsonValue));
    }

    /**
     */
    async tutorUserSchedulesPartialUpdate(requestParameters: TutorUserSchedulesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateDeleteTutorUserSchedule> {
        const response = await this.tutorUserSchedulesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorUserSchedulesRetrieveRaw(requestParameters: TutorUserSchedulesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadTutorUserSchedule>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tutorUserSchedulesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutor-user-schedules/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadTutorUserScheduleFromJSON(jsonValue));
    }

    /**
     */
    async tutorUserSchedulesRetrieve(requestParameters: TutorUserSchedulesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadTutorUserSchedule> {
        const response = await this.tutorUserSchedulesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorUserSchedulesUpdateRaw(requestParameters: TutorUserSchedulesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateDeleteTutorUserSchedule>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tutorUserSchedulesUpdate.');
        }

        if (requestParameters.createDeleteTutorUserScheduleRequest === null || requestParameters.createDeleteTutorUserScheduleRequest === undefined) {
            throw new runtime.RequiredError('createDeleteTutorUserScheduleRequest','Required parameter requestParameters.createDeleteTutorUserScheduleRequest was null or undefined when calling tutorUserSchedulesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutor-user-schedules/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeleteTutorUserScheduleRequestToJSON(requestParameters.createDeleteTutorUserScheduleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateDeleteTutorUserScheduleFromJSON(jsonValue));
    }

    /**
     */
    async tutorUserSchedulesUpdate(requestParameters: TutorUserSchedulesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateDeleteTutorUserSchedule> {
        const response = await this.tutorUserSchedulesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
