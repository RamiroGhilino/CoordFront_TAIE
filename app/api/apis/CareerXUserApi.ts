/* tslint:disable */
/* eslint-disable */
/**
 * Turnero TAIE API
 * API correspondiente al trabajo final \"Turnero TAIE\", realizado por los alumnos Juan Manuel Villarreal y Ghilino Ramiro
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CareerXUser,
  CareerXUserRequest,
  PatchedCareerXUserRequest,
} from '../models/index';
import {
    CareerXUserFromJSON,
    CareerXUserToJSON,
    CareerXUserRequestFromJSON,
    CareerXUserRequestToJSON,
    PatchedCareerXUserRequestFromJSON,
    PatchedCareerXUserRequestToJSON,
} from '../models/index';

export interface CareerXUserCreateRequest {
    careerXUserRequest: CareerXUserRequest;
}

export interface CareerXUserDestroyRequest {
    id: number;
}

export interface CareerXUserPartialUpdateRequest {
    id: number;
    patchedCareerXUserRequest?: PatchedCareerXUserRequest;
}

export interface CareerXUserRetrieveRequest {
    id: number;
}

export interface CareerXUserUpdateRequest {
    id: number;
    careerXUserRequest: CareerXUserRequest;
}

/**
 * 
 */
export class CareerXUserApi extends runtime.BaseAPI {

    /**
     */
    async careerXUserCreateRaw(requestParameters: CareerXUserCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CareerXUser>> {
        if (requestParameters.careerXUserRequest === null || requestParameters.careerXUserRequest === undefined) {
            throw new runtime.RequiredError('careerXUserRequest','Required parameter requestParameters.careerXUserRequest was null or undefined when calling careerXUserCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/career-x-user/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CareerXUserRequestToJSON(requestParameters.careerXUserRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CareerXUserFromJSON(jsonValue));
    }

    /**
     */
    async careerXUserCreate(requestParameters: CareerXUserCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CareerXUser> {
        const response = await this.careerXUserCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async careerXUserDestroyRaw(requestParameters: CareerXUserDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling careerXUserDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/career-x-user/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async careerXUserDestroy(requestParameters: CareerXUserDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.careerXUserDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async careerXUserListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CareerXUser>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/career-x-user/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CareerXUserFromJSON));
    }

    /**
     */
    async careerXUserList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CareerXUser>> {
        const response = await this.careerXUserListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async careerXUserPartialUpdateRaw(requestParameters: CareerXUserPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CareerXUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling careerXUserPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/career-x-user/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCareerXUserRequestToJSON(requestParameters.patchedCareerXUserRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CareerXUserFromJSON(jsonValue));
    }

    /**
     */
    async careerXUserPartialUpdate(requestParameters: CareerXUserPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CareerXUser> {
        const response = await this.careerXUserPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async careerXUserRetrieveRaw(requestParameters: CareerXUserRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CareerXUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling careerXUserRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/career-x-user/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CareerXUserFromJSON(jsonValue));
    }

    /**
     */
    async careerXUserRetrieve(requestParameters: CareerXUserRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CareerXUser> {
        const response = await this.careerXUserRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async careerXUserUpdateRaw(requestParameters: CareerXUserUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CareerXUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling careerXUserUpdate.');
        }

        if (requestParameters.careerXUserRequest === null || requestParameters.careerXUserRequest === undefined) {
            throw new runtime.RequiredError('careerXUserRequest','Required parameter requestParameters.careerXUserRequest was null or undefined when calling careerXUserUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/career-x-user/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CareerXUserRequestToJSON(requestParameters.careerXUserRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CareerXUserFromJSON(jsonValue));
    }

    /**
     */
    async careerXUserUpdate(requestParameters: CareerXUserUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CareerXUser> {
        const response = await this.careerXUserUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
