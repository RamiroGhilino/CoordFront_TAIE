/* tslint:disable */
/* eslint-disable */
/**
 * Turnero TAIE API
 * API correspondiente al trabajo final \"Turnero TAIE\", realizado por los alumnos Juan Manuel Villarreal y Ghilino Ramiro
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchedTutorshipReportRequest,
  TutorshipReport,
  TutorshipReportRequest,
} from '../models/index';
import {
    PatchedTutorshipReportRequestFromJSON,
    PatchedTutorshipReportRequestToJSON,
    TutorshipReportFromJSON,
    TutorshipReportToJSON,
    TutorshipReportRequestFromJSON,
    TutorshipReportRequestToJSON,
} from '../models/index';

export interface TutorshipReportsCreateRequest {
    tutorshipReportRequest: TutorshipReportRequest;
}

export interface TutorshipReportsDestroyRequest {
    id: number;
}

export interface TutorshipReportsPartialUpdateRequest {
    id: number;
    patchedTutorshipReportRequest?: PatchedTutorshipReportRequest;
}

export interface TutorshipReportsRetrieveRequest {
    id: number;
}

export interface TutorshipReportsUpdateRequest {
    id: number;
    tutorshipReportRequest: TutorshipReportRequest;
}

/**
 * 
 */
export class TutorshipReportsApi extends runtime.BaseAPI {

    /**
     */
    async tutorshipReportsCreateRaw(requestParameters: TutorshipReportsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TutorshipReport>> {
        if (requestParameters.tutorshipReportRequest === null || requestParameters.tutorshipReportRequest === undefined) {
            throw new runtime.RequiredError('tutorshipReportRequest','Required parameter requestParameters.tutorshipReportRequest was null or undefined when calling tutorshipReportsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutorship-reports/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TutorshipReportRequestToJSON(requestParameters.tutorshipReportRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TutorshipReportFromJSON(jsonValue));
    }

    /**
     */
    async tutorshipReportsCreate(requestParameters: TutorshipReportsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TutorshipReport> {
        const response = await this.tutorshipReportsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorshipReportsDestroyRaw(requestParameters: TutorshipReportsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tutorshipReportsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutorship-reports/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tutorshipReportsDestroy(requestParameters: TutorshipReportsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tutorshipReportsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tutorshipReportsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TutorshipReport>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutorship-reports/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TutorshipReportFromJSON));
    }

    /**
     */
    async tutorshipReportsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TutorshipReport>> {
        const response = await this.tutorshipReportsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorshipReportsPartialUpdateRaw(requestParameters: TutorshipReportsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TutorshipReport>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tutorshipReportsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutorship-reports/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedTutorshipReportRequestToJSON(requestParameters.patchedTutorshipReportRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TutorshipReportFromJSON(jsonValue));
    }

    /**
     */
    async tutorshipReportsPartialUpdate(requestParameters: TutorshipReportsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TutorshipReport> {
        const response = await this.tutorshipReportsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorshipReportsRetrieveRaw(requestParameters: TutorshipReportsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TutorshipReport>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tutorshipReportsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutorship-reports/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TutorshipReportFromJSON(jsonValue));
    }

    /**
     */
    async tutorshipReportsRetrieve(requestParameters: TutorshipReportsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TutorshipReport> {
        const response = await this.tutorshipReportsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorshipReportsUpdateRaw(requestParameters: TutorshipReportsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TutorshipReport>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tutorshipReportsUpdate.');
        }

        if (requestParameters.tutorshipReportRequest === null || requestParameters.tutorshipReportRequest === undefined) {
            throw new runtime.RequiredError('tutorshipReportRequest','Required parameter requestParameters.tutorshipReportRequest was null or undefined when calling tutorshipReportsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutorship-reports/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TutorshipReportRequestToJSON(requestParameters.tutorshipReportRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TutorshipReportFromJSON(jsonValue));
    }

    /**
     */
    async tutorshipReportsUpdate(requestParameters: TutorshipReportsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TutorshipReport> {
        const response = await this.tutorshipReportsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
