/* tslint:disable */
/* eslint-disable */
/**
 * Turnero TAIE API
 * API correspondiente al trabajo final \"Turnero TAIE\", realizado por los alumnos Juan Manuel Villarreal y Ghilino Ramiro
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchedTutorUserReviewRequest,
  TutorUserReview,
  TutorUserReviewRequest,
} from '../models/index';
import {
    PatchedTutorUserReviewRequestFromJSON,
    PatchedTutorUserReviewRequestToJSON,
    TutorUserReviewFromJSON,
    TutorUserReviewToJSON,
    TutorUserReviewRequestFromJSON,
    TutorUserReviewRequestToJSON,
} from '../models/index';

export interface TutorUserReviewCreateRequest {
    tutorUserReviewRequest: TutorUserReviewRequest;
}

export interface TutorUserReviewDestroyRequest {
    id: number;
}

export interface TutorUserReviewPartialUpdateRequest {
    id: number;
    patchedTutorUserReviewRequest?: PatchedTutorUserReviewRequest;
}

export interface TutorUserReviewRetrieveRequest {
    id: number;
}

export interface TutorUserReviewUpdateRequest {
    id: number;
    tutorUserReviewRequest: TutorUserReviewRequest;
}

/**
 * 
 */
export class TutorUserReviewApi extends runtime.BaseAPI {

    /**
     */
    async tutorUserReviewCreateRaw(requestParameters: TutorUserReviewCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TutorUserReview>> {
        if (requestParameters.tutorUserReviewRequest === null || requestParameters.tutorUserReviewRequest === undefined) {
            throw new runtime.RequiredError('tutorUserReviewRequest','Required parameter requestParameters.tutorUserReviewRequest was null or undefined when calling tutorUserReviewCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutor-user-review/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TutorUserReviewRequestToJSON(requestParameters.tutorUserReviewRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TutorUserReviewFromJSON(jsonValue));
    }

    /**
     */
    async tutorUserReviewCreate(requestParameters: TutorUserReviewCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TutorUserReview> {
        const response = await this.tutorUserReviewCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorUserReviewDestroyRaw(requestParameters: TutorUserReviewDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tutorUserReviewDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutor-user-review/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tutorUserReviewDestroy(requestParameters: TutorUserReviewDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tutorUserReviewDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tutorUserReviewListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TutorUserReview>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutor-user-review/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TutorUserReviewFromJSON));
    }

    /**
     */
    async tutorUserReviewList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TutorUserReview>> {
        const response = await this.tutorUserReviewListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorUserReviewPartialUpdateRaw(requestParameters: TutorUserReviewPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TutorUserReview>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tutorUserReviewPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutor-user-review/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedTutorUserReviewRequestToJSON(requestParameters.patchedTutorUserReviewRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TutorUserReviewFromJSON(jsonValue));
    }

    /**
     */
    async tutorUserReviewPartialUpdate(requestParameters: TutorUserReviewPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TutorUserReview> {
        const response = await this.tutorUserReviewPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorUserReviewRetrieveRaw(requestParameters: TutorUserReviewRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TutorUserReview>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tutorUserReviewRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutor-user-review/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TutorUserReviewFromJSON(jsonValue));
    }

    /**
     */
    async tutorUserReviewRetrieve(requestParameters: TutorUserReviewRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TutorUserReview> {
        const response = await this.tutorUserReviewRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorUserReviewUpdateRaw(requestParameters: TutorUserReviewUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TutorUserReview>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tutorUserReviewUpdate.');
        }

        if (requestParameters.tutorUserReviewRequest === null || requestParameters.tutorUserReviewRequest === undefined) {
            throw new runtime.RequiredError('tutorUserReviewRequest','Required parameter requestParameters.tutorUserReviewRequest was null or undefined when calling tutorUserReviewUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutor-user-review/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TutorUserReviewRequestToJSON(requestParameters.tutorUserReviewRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TutorUserReviewFromJSON(jsonValue));
    }

    /**
     */
    async tutorUserReviewUpdate(requestParameters: TutorUserReviewUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TutorUserReview> {
        const response = await this.tutorUserReviewUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
