/* tslint:disable */
/* eslint-disable */
/**
 * Turnero TAIE API
 * API correspondiente al trabajo final \"Turnero TAIE\", realizado por los alumnos Juan Manuel Villarreal y Ghilino Ramiro
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CareerXArea,
  CareerXAreaRequest,
  PatchedCareerXAreaRequest,
} from '../models/index';
import {
    CareerXAreaFromJSON,
    CareerXAreaToJSON,
    CareerXAreaRequestFromJSON,
    CareerXAreaRequestToJSON,
    PatchedCareerXAreaRequestFromJSON,
    PatchedCareerXAreaRequestToJSON,
} from '../models/index';

export interface CareerXAreaCreateRequest {
    careerXAreaRequest: CareerXAreaRequest;
}

export interface CareerXAreaDestroyRequest {
    id: number;
}

export interface CareerXAreaPartialUpdateRequest {
    id: number;
    patchedCareerXAreaRequest?: PatchedCareerXAreaRequest;
}

export interface CareerXAreaRetrieveRequest {
    id: number;
}

export interface CareerXAreaUpdateRequest {
    id: number;
    careerXAreaRequest: CareerXAreaRequest;
}

/**
 * 
 */
export class CareerXAreaApi extends runtime.BaseAPI {

    /**
     */
    async careerXAreaCreateRaw(requestParameters: CareerXAreaCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CareerXArea>> {
        if (requestParameters.careerXAreaRequest === null || requestParameters.careerXAreaRequest === undefined) {
            throw new runtime.RequiredError('careerXAreaRequest','Required parameter requestParameters.careerXAreaRequest was null or undefined when calling careerXAreaCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/career-x-area/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CareerXAreaRequestToJSON(requestParameters.careerXAreaRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CareerXAreaFromJSON(jsonValue));
    }

    /**
     */
    async careerXAreaCreate(requestParameters: CareerXAreaCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CareerXArea> {
        const response = await this.careerXAreaCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async careerXAreaDestroyRaw(requestParameters: CareerXAreaDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling careerXAreaDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/career-x-area/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async careerXAreaDestroy(requestParameters: CareerXAreaDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.careerXAreaDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async careerXAreaListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CareerXArea>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/career-x-area/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CareerXAreaFromJSON));
    }

    /**
     */
    async careerXAreaList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CareerXArea>> {
        const response = await this.careerXAreaListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async careerXAreaPartialUpdateRaw(requestParameters: CareerXAreaPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CareerXArea>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling careerXAreaPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/career-x-area/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCareerXAreaRequestToJSON(requestParameters.patchedCareerXAreaRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CareerXAreaFromJSON(jsonValue));
    }

    /**
     */
    async careerXAreaPartialUpdate(requestParameters: CareerXAreaPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CareerXArea> {
        const response = await this.careerXAreaPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async careerXAreaRetrieveRaw(requestParameters: CareerXAreaRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CareerXArea>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling careerXAreaRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/career-x-area/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CareerXAreaFromJSON(jsonValue));
    }

    /**
     */
    async careerXAreaRetrieve(requestParameters: CareerXAreaRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CareerXArea> {
        const response = await this.careerXAreaRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async careerXAreaUpdateRaw(requestParameters: CareerXAreaUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CareerXArea>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling careerXAreaUpdate.');
        }

        if (requestParameters.careerXAreaRequest === null || requestParameters.careerXAreaRequest === undefined) {
            throw new runtime.RequiredError('careerXAreaRequest','Required parameter requestParameters.careerXAreaRequest was null or undefined when calling careerXAreaUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/career-x-area/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CareerXAreaRequestToJSON(requestParameters.careerXAreaRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CareerXAreaFromJSON(jsonValue));
    }

    /**
     */
    async careerXAreaUpdate(requestParameters: CareerXAreaUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CareerXArea> {
        const response = await this.careerXAreaUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
