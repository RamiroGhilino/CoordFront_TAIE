/* tslint:disable */
/* eslint-disable */
/**
 * Turnero TAIE API
 * API correspondiente al trabajo final \"Turnero TAIE\", realizado por los alumnos Juan Manuel Villarreal y Ghilino Ramiro
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchedPostulationRequest,
  Postulation,
  PostulationRequest,
} from '../models/index';
import {
    PatchedPostulationRequestFromJSON,
    PatchedPostulationRequestToJSON,
    PostulationFromJSON,
    PostulationToJSON,
    PostulationRequestFromJSON,
    PostulationRequestToJSON,
} from '../models/index';

export interface PostulationsCreateRequest {
    postulationRequest: PostulationRequest;
}

export interface PostulationsDestroyRequest {
    id: number;
}

export interface PostulationsPartialUpdateRequest {
    id: number;
    patchedPostulationRequest?: PatchedPostulationRequest;
}

export interface PostulationsRetrieveRequest {
    id: number;
}

export interface PostulationsUpdateRequest {
    id: number;
    postulationRequest: PostulationRequest;
}

/**
 * 
 */
export class PostulationsApi extends runtime.BaseAPI {

    /**
     */
    async postulationsCreateRaw(requestParameters: PostulationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Postulation>> {
        if (requestParameters.postulationRequest === null || requestParameters.postulationRequest === undefined) {
            throw new runtime.RequiredError('postulationRequest','Required parameter requestParameters.postulationRequest was null or undefined when calling postulationsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/postulations/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostulationRequestToJSON(requestParameters.postulationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostulationFromJSON(jsonValue));
    }

    /**
     */
    async postulationsCreate(requestParameters: PostulationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Postulation> {
        const response = await this.postulationsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postulationsDestroyRaw(requestParameters: PostulationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postulationsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/postulations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postulationsDestroy(requestParameters: PostulationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postulationsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postulationsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Postulation>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/postulations/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostulationFromJSON));
    }

    /**
     */
    async postulationsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Postulation>> {
        const response = await this.postulationsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async postulationsPartialUpdateRaw(requestParameters: PostulationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Postulation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postulationsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/postulations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPostulationRequestToJSON(requestParameters.patchedPostulationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostulationFromJSON(jsonValue));
    }

    /**
     */
    async postulationsPartialUpdate(requestParameters: PostulationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Postulation> {
        const response = await this.postulationsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postulationsRetrieveRaw(requestParameters: PostulationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Postulation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postulationsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/postulations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostulationFromJSON(jsonValue));
    }

    /**
     */
    async postulationsRetrieve(requestParameters: PostulationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Postulation> {
        const response = await this.postulationsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postulationsUpdateRaw(requestParameters: PostulationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Postulation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postulationsUpdate.');
        }

        if (requestParameters.postulationRequest === null || requestParameters.postulationRequest === undefined) {
            throw new runtime.RequiredError('postulationRequest','Required parameter requestParameters.postulationRequest was null or undefined when calling postulationsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/postulations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostulationRequestToJSON(requestParameters.postulationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostulationFromJSON(jsonValue));
    }

    /**
     */
    async postulationsUpdate(requestParameters: PostulationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Postulation> {
        const response = await this.postulationsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
