/* tslint:disable */
/* eslint-disable */
/**
 * Turnero TAIE API
 * API correspondiente al trabajo final \"Turnero TAIE\", realizado por los alumnos Juan Manuel Villarreal y Ghilino Ramiro
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchedTutorshipInstanceRequest,
  SearchTutorship,
  SearchTutorshipRequest,
  TutorshipInstance,
  TutorshipInstanceRequest,
} from '../models/index';
import {
    PatchedTutorshipInstanceRequestFromJSON,
    PatchedTutorshipInstanceRequestToJSON,
    SearchTutorshipFromJSON,
    SearchTutorshipToJSON,
    SearchTutorshipRequestFromJSON,
    SearchTutorshipRequestToJSON,
    TutorshipInstanceFromJSON,
    TutorshipInstanceToJSON,
    TutorshipInstanceRequestFromJSON,
    TutorshipInstanceRequestToJSON,
} from '../models/index';

export interface TutorshipInstancesCreateRequest {
    tutorshipInstanceRequest: TutorshipInstanceRequest;
}

export interface TutorshipInstancesDestroyRequest {
    id: number;
}

export interface TutorshipInstancesEnrollTutorshipCreateRequest {
    searchTutorshipRequest: SearchTutorshipRequest;
}

export interface TutorshipInstancesListRequest {
    role: string;
}

export interface TutorshipInstancesPartialUpdateRequest {
    id: number;
    patchedTutorshipInstanceRequest?: PatchedTutorshipInstanceRequest;
}

export interface TutorshipInstancesRetrieveRequest {
    id: number;
}

export interface TutorshipInstancesUpdateRequest {
    id: number;
    tutorshipInstanceRequest: TutorshipInstanceRequest;
}

/**
 * 
 */
export class TutorshipInstancesApi extends runtime.BaseAPI {

    /**
     */
    async tutorshipInstancesCreateRaw(requestParameters: TutorshipInstancesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TutorshipInstance>> {
        if (requestParameters.tutorshipInstanceRequest === null || requestParameters.tutorshipInstanceRequest === undefined) {
            throw new runtime.RequiredError('tutorshipInstanceRequest','Required parameter requestParameters.tutorshipInstanceRequest was null or undefined when calling tutorshipInstancesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutorship-instances/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TutorshipInstanceRequestToJSON(requestParameters.tutorshipInstanceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TutorshipInstanceFromJSON(jsonValue));
    }

    /**
     */
    async tutorshipInstancesCreate(requestParameters: TutorshipInstancesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TutorshipInstance> {
        const response = await this.tutorshipInstancesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorshipInstancesDestroyRaw(requestParameters: TutorshipInstancesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tutorshipInstancesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutorship-instances/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tutorshipInstancesDestroy(requestParameters: TutorshipInstancesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tutorshipInstancesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tutorshipInstancesEnrollTutorshipCreateRaw(requestParameters: TutorshipInstancesEnrollTutorshipCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTutorship>> {
        if (requestParameters.searchTutorshipRequest === null || requestParameters.searchTutorshipRequest === undefined) {
            throw new runtime.RequiredError('searchTutorshipRequest','Required parameter requestParameters.searchTutorshipRequest was null or undefined when calling tutorshipInstancesEnrollTutorshipCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutorship-instances/enroll-tutorship/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchTutorshipRequestToJSON(requestParameters.searchTutorshipRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchTutorshipFromJSON(jsonValue));
    }

    /**
     */
    async tutorshipInstancesEnrollTutorshipCreate(requestParameters: TutorshipInstancesEnrollTutorshipCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTutorship> {
        const response = await this.tutorshipInstancesEnrollTutorshipCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorshipInstancesListRaw(requestParameters: TutorshipInstancesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SearchTutorship>>> {
        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling tutorshipInstancesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.role !== undefined) {
            queryParameters['role'] = requestParameters.role;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutorship-instances/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SearchTutorshipFromJSON));
    }

    /**
     */
    async tutorshipInstancesList(requestParameters: TutorshipInstancesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SearchTutorship>> {
        const response = await this.tutorshipInstancesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorshipInstancesPartialUpdateRaw(requestParameters: TutorshipInstancesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TutorshipInstance>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tutorshipInstancesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutorship-instances/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedTutorshipInstanceRequestToJSON(requestParameters.patchedTutorshipInstanceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TutorshipInstanceFromJSON(jsonValue));
    }

    /**
     */
    async tutorshipInstancesPartialUpdate(requestParameters: TutorshipInstancesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TutorshipInstance> {
        const response = await this.tutorshipInstancesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorshipInstancesRetrieveRaw(requestParameters: TutorshipInstancesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTutorship>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tutorshipInstancesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutorship-instances/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchTutorshipFromJSON(jsonValue));
    }

    /**
     */
    async tutorshipInstancesRetrieve(requestParameters: TutorshipInstancesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTutorship> {
        const response = await this.tutorshipInstancesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tutorshipInstancesUpdateRaw(requestParameters: TutorshipInstancesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TutorshipInstance>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tutorshipInstancesUpdate.');
        }

        if (requestParameters.tutorshipInstanceRequest === null || requestParameters.tutorshipInstanceRequest === undefined) {
            throw new runtime.RequiredError('tutorshipInstanceRequest','Required parameter requestParameters.tutorshipInstanceRequest was null or undefined when calling tutorshipInstancesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tutorship-instances/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TutorshipInstanceRequestToJSON(requestParameters.tutorshipInstanceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TutorshipInstanceFromJSON(jsonValue));
    }

    /**
     */
    async tutorshipInstancesUpdate(requestParameters: TutorshipInstancesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TutorshipInstance> {
        const response = await this.tutorshipInstancesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
