/* tslint:disable */
/* eslint-disable */
/**
 * Turnero TAIE API
 * API correspondiente al trabajo final \"Turnero TAIE\", realizado por los alumnos Juan Manuel Villarreal y Ghilino Ramiro
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchedUserXRoleRequest,
  UserXRole,
  UserXRoleRequest,
} from '../models/index';
import {
    PatchedUserXRoleRequestFromJSON,
    PatchedUserXRoleRequestToJSON,
    UserXRoleFromJSON,
    UserXRoleToJSON,
    UserXRoleRequestFromJSON,
    UserXRoleRequestToJSON,
} from '../models/index';

export interface UserXRoleCreateRequest {
    userXRoleRequest: UserXRoleRequest;
}

export interface UserXRoleDestroyRequest {
    id: number;
}

export interface UserXRolePartialUpdateRequest {
    id: number;
    patchedUserXRoleRequest?: PatchedUserXRoleRequest;
}

export interface UserXRoleRetrieveRequest {
    id: number;
}

export interface UserXRoleUpdateRequest {
    id: number;
    userXRoleRequest: UserXRoleRequest;
}

/**
 * 
 */
export class UserXRoleApi extends runtime.BaseAPI {

    /**
     */
    async userXRoleCreateRaw(requestParameters: UserXRoleCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserXRole>> {
        if (requestParameters.userXRoleRequest === null || requestParameters.userXRoleRequest === undefined) {
            throw new runtime.RequiredError('userXRoleRequest','Required parameter requestParameters.userXRoleRequest was null or undefined when calling userXRoleCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-role/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserXRoleRequestToJSON(requestParameters.userXRoleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserXRoleFromJSON(jsonValue));
    }

    /**
     */
    async userXRoleCreate(requestParameters: UserXRoleCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserXRole> {
        const response = await this.userXRoleCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userXRoleDestroyRaw(requestParameters: UserXRoleDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userXRoleDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-role/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userXRoleDestroy(requestParameters: UserXRoleDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userXRoleDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userXRoleListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserXRole>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-role/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserXRoleFromJSON));
    }

    /**
     */
    async userXRoleList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserXRole>> {
        const response = await this.userXRoleListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async userXRolePartialUpdateRaw(requestParameters: UserXRolePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserXRole>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userXRolePartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-role/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserXRoleRequestToJSON(requestParameters.patchedUserXRoleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserXRoleFromJSON(jsonValue));
    }

    /**
     */
    async userXRolePartialUpdate(requestParameters: UserXRolePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserXRole> {
        const response = await this.userXRolePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userXRoleRetrieveRaw(requestParameters: UserXRoleRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserXRole>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userXRoleRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-role/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserXRoleFromJSON(jsonValue));
    }

    /**
     */
    async userXRoleRetrieve(requestParameters: UserXRoleRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserXRole> {
        const response = await this.userXRoleRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userXRoleUpdateRaw(requestParameters: UserXRoleUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserXRole>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userXRoleUpdate.');
        }

        if (requestParameters.userXRoleRequest === null || requestParameters.userXRoleRequest === undefined) {
            throw new runtime.RequiredError('userXRoleRequest','Required parameter requestParameters.userXRoleRequest was null or undefined when calling userXRoleUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-role/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserXRoleRequestToJSON(requestParameters.userXRoleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserXRoleFromJSON(jsonValue));
    }

    /**
     */
    async userXRoleUpdate(requestParameters: UserXRoleUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserXRole> {
        const response = await this.userXRoleUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
