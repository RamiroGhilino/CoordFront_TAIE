/* tslint:disable */
/* eslint-disable */
/**
 * Turnero TAIE API
 * API correspondiente al trabajo final \"Turnero TAIE\", realizado por los alumnos Juan Manuel Villarreal y Ghilino Ramiro
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchedUserXTutorshipInstanceXRoleRequest,
  UserXTutorshipInstanceXRole,
  UserXTutorshipInstanceXRoleRequest,
} from '../models/index';
import {
    PatchedUserXTutorshipInstanceXRoleRequestFromJSON,
    PatchedUserXTutorshipInstanceXRoleRequestToJSON,
    UserXTutorshipInstanceXRoleFromJSON,
    UserXTutorshipInstanceXRoleToJSON,
    UserXTutorshipInstanceXRoleRequestFromJSON,
    UserXTutorshipInstanceXRoleRequestToJSON,
} from '../models/index';

export interface UserXTutorshipInstanceXRoleCreateRequest {
    userXTutorshipInstanceXRoleRequest: UserXTutorshipInstanceXRoleRequest;
}

export interface UserXTutorshipInstanceXRoleDestroyRequest {
    id: number;
}

export interface UserXTutorshipInstanceXRolePartialUpdateRequest {
    id: number;
    patchedUserXTutorshipInstanceXRoleRequest?: PatchedUserXTutorshipInstanceXRoleRequest;
}

export interface UserXTutorshipInstanceXRoleRetrieveRequest {
    id: number;
}

export interface UserXTutorshipInstanceXRoleUpdateRequest {
    id: number;
    userXTutorshipInstanceXRoleRequest: UserXTutorshipInstanceXRoleRequest;
}

/**
 * 
 */
export class UserXTutorshipInstanceXRoleApi extends runtime.BaseAPI {

    /**
     */
    async userXTutorshipInstanceXRoleCreateRaw(requestParameters: UserXTutorshipInstanceXRoleCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserXTutorshipInstanceXRole>> {
        if (requestParameters.userXTutorshipInstanceXRoleRequest === null || requestParameters.userXTutorshipInstanceXRoleRequest === undefined) {
            throw new runtime.RequiredError('userXTutorshipInstanceXRoleRequest','Required parameter requestParameters.userXTutorshipInstanceXRoleRequest was null or undefined when calling userXTutorshipInstanceXRoleCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-tutorship-instance-x-role/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserXTutorshipInstanceXRoleRequestToJSON(requestParameters.userXTutorshipInstanceXRoleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserXTutorshipInstanceXRoleFromJSON(jsonValue));
    }

    /**
     */
    async userXTutorshipInstanceXRoleCreate(requestParameters: UserXTutorshipInstanceXRoleCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserXTutorshipInstanceXRole> {
        const response = await this.userXTutorshipInstanceXRoleCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userXTutorshipInstanceXRoleDestroyRaw(requestParameters: UserXTutorshipInstanceXRoleDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userXTutorshipInstanceXRoleDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-tutorship-instance-x-role/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userXTutorshipInstanceXRoleDestroy(requestParameters: UserXTutorshipInstanceXRoleDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userXTutorshipInstanceXRoleDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userXTutorshipInstanceXRoleListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserXTutorshipInstanceXRole>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-tutorship-instance-x-role/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserXTutorshipInstanceXRoleFromJSON));
    }

    /**
     */
    async userXTutorshipInstanceXRoleList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserXTutorshipInstanceXRole>> {
        const response = await this.userXTutorshipInstanceXRoleListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async userXTutorshipInstanceXRolePartialUpdateRaw(requestParameters: UserXTutorshipInstanceXRolePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserXTutorshipInstanceXRole>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userXTutorshipInstanceXRolePartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-tutorship-instance-x-role/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserXTutorshipInstanceXRoleRequestToJSON(requestParameters.patchedUserXTutorshipInstanceXRoleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserXTutorshipInstanceXRoleFromJSON(jsonValue));
    }

    /**
     */
    async userXTutorshipInstanceXRolePartialUpdate(requestParameters: UserXTutorshipInstanceXRolePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserXTutorshipInstanceXRole> {
        const response = await this.userXTutorshipInstanceXRolePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userXTutorshipInstanceXRoleRetrieveRaw(requestParameters: UserXTutorshipInstanceXRoleRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserXTutorshipInstanceXRole>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userXTutorshipInstanceXRoleRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-tutorship-instance-x-role/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserXTutorshipInstanceXRoleFromJSON(jsonValue));
    }

    /**
     */
    async userXTutorshipInstanceXRoleRetrieve(requestParameters: UserXTutorshipInstanceXRoleRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserXTutorshipInstanceXRole> {
        const response = await this.userXTutorshipInstanceXRoleRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userXTutorshipInstanceXRoleUpdateRaw(requestParameters: UserXTutorshipInstanceXRoleUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserXTutorshipInstanceXRole>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userXTutorshipInstanceXRoleUpdate.');
        }

        if (requestParameters.userXTutorshipInstanceXRoleRequest === null || requestParameters.userXTutorshipInstanceXRoleRequest === undefined) {
            throw new runtime.RequiredError('userXTutorshipInstanceXRoleRequest','Required parameter requestParameters.userXTutorshipInstanceXRoleRequest was null or undefined when calling userXTutorshipInstanceXRoleUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-tutorship-instance-x-role/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserXTutorshipInstanceXRoleRequestToJSON(requestParameters.userXTutorshipInstanceXRoleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserXTutorshipInstanceXRoleFromJSON(jsonValue));
    }

    /**
     */
    async userXTutorshipInstanceXRoleUpdate(requestParameters: UserXTutorshipInstanceXRoleUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserXTutorshipInstanceXRole> {
        const response = await this.userXTutorshipInstanceXRoleUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
