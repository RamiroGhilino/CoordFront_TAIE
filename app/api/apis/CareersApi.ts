/* tslint:disable */
/* eslint-disable */
/**
 * Turnero TAIE API
 * API correspondiente al trabajo final \"Turnero TAIE\", realizado por los alumnos Juan Manuel Villarreal y Ghilino Ramiro
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Career,
  CareerRequest,
  PatchedCareerRequest,
} from '../models/index';
import {
    CareerFromJSON,
    CareerToJSON,
    CareerRequestFromJSON,
    CareerRequestToJSON,
    PatchedCareerRequestFromJSON,
    PatchedCareerRequestToJSON,
} from '../models/index';

export interface CareersCreateRequest {
    careerRequest: CareerRequest;
}

export interface CareersDestroyRequest {
    id: number;
}

export interface CareersPartialUpdateRequest {
    id: number;
    patchedCareerRequest?: PatchedCareerRequest;
}

export interface CareersRetrieveRequest {
    id: number;
}

export interface CareersUpdateRequest {
    id: number;
    careerRequest: CareerRequest;
}

/**
 * 
 */
export class CareersApi extends runtime.BaseAPI {

    /**
     */
    async careersCreateRaw(requestParameters: CareersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Career>> {
        if (requestParameters.careerRequest === null || requestParameters.careerRequest === undefined) {
            throw new runtime.RequiredError('careerRequest','Required parameter requestParameters.careerRequest was null or undefined when calling careersCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/careers/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CareerRequestToJSON(requestParameters.careerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CareerFromJSON(jsonValue));
    }

    /**
     */
    async careersCreate(requestParameters: CareersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Career> {
        const response = await this.careersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async careersDestroyRaw(requestParameters: CareersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling careersDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/careers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async careersDestroy(requestParameters: CareersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.careersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async careersListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Career>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/careers/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CareerFromJSON));
    }

    /**
     */
    async careersList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Career>> {
        const response = await this.careersListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async careersPartialUpdateRaw(requestParameters: CareersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Career>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling careersPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/careers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCareerRequestToJSON(requestParameters.patchedCareerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CareerFromJSON(jsonValue));
    }

    /**
     */
    async careersPartialUpdate(requestParameters: CareersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Career> {
        const response = await this.careersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async careersRetrieveRaw(requestParameters: CareersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Career>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling careersRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/careers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CareerFromJSON(jsonValue));
    }

    /**
     */
    async careersRetrieve(requestParameters: CareersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Career> {
        const response = await this.careersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async careersUpdateRaw(requestParameters: CareersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Career>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling careersUpdate.');
        }

        if (requestParameters.careerRequest === null || requestParameters.careerRequest === undefined) {
            throw new runtime.RequiredError('careerRequest','Required parameter requestParameters.careerRequest was null or undefined when calling careersUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/careers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CareerRequestToJSON(requestParameters.careerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CareerFromJSON(jsonValue));
    }

    /**
     */
    async careersUpdate(requestParameters: CareersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Career> {
        const response = await this.careersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
