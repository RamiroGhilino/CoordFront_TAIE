/* tslint:disable */
/* eslint-disable */
/**
 * Turnero TAIE API
 * API correspondiente al trabajo final \"Turnero TAIE\", realizado por los alumnos Juan Manuel Villarreal y Ghilino Ramiro
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchedUserXAreaRequest,
  UserXArea,
  UserXAreaRequest,
} from '../models/index';
import {
    PatchedUserXAreaRequestFromJSON,
    PatchedUserXAreaRequestToJSON,
    UserXAreaFromJSON,
    UserXAreaToJSON,
    UserXAreaRequestFromJSON,
    UserXAreaRequestToJSON,
} from '../models/index';

export interface UserXAreaCreateRequest {
    userXAreaRequest: UserXAreaRequest;
}

export interface UserXAreaDestroyRequest {
    id: number;
}

export interface UserXAreaPartialUpdateRequest {
    id: number;
    patchedUserXAreaRequest?: PatchedUserXAreaRequest;
}

export interface UserXAreaRetrieveRequest {
    id: number;
}

export interface UserXAreaUpdateRequest {
    id: number;
    userXAreaRequest: UserXAreaRequest;
}

/**
 * 
 */
export class UserXAreaApi extends runtime.BaseAPI {

    /**
     */
    async userXAreaCreateRaw(requestParameters: UserXAreaCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserXArea>> {
        if (requestParameters.userXAreaRequest === null || requestParameters.userXAreaRequest === undefined) {
            throw new runtime.RequiredError('userXAreaRequest','Required parameter requestParameters.userXAreaRequest was null or undefined when calling userXAreaCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-area/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserXAreaRequestToJSON(requestParameters.userXAreaRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserXAreaFromJSON(jsonValue));
    }

    /**
     */
    async userXAreaCreate(requestParameters: UserXAreaCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserXArea> {
        const response = await this.userXAreaCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userXAreaDestroyRaw(requestParameters: UserXAreaDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userXAreaDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-area/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userXAreaDestroy(requestParameters: UserXAreaDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userXAreaDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userXAreaListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserXArea>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-area/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserXAreaFromJSON));
    }

    /**
     */
    async userXAreaList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserXArea>> {
        const response = await this.userXAreaListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async userXAreaPartialUpdateRaw(requestParameters: UserXAreaPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserXArea>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userXAreaPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-area/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserXAreaRequestToJSON(requestParameters.patchedUserXAreaRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserXAreaFromJSON(jsonValue));
    }

    /**
     */
    async userXAreaPartialUpdate(requestParameters: UserXAreaPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserXArea> {
        const response = await this.userXAreaPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userXAreaRetrieveRaw(requestParameters: UserXAreaRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserXArea>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userXAreaRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-area/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserXAreaFromJSON(jsonValue));
    }

    /**
     */
    async userXAreaRetrieve(requestParameters: UserXAreaRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserXArea> {
        const response = await this.userXAreaRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userXAreaUpdateRaw(requestParameters: UserXAreaUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserXArea>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userXAreaUpdate.');
        }

        if (requestParameters.userXAreaRequest === null || requestParameters.userXAreaRequest === undefined) {
            throw new runtime.RequiredError('userXAreaRequest','Required parameter requestParameters.userXAreaRequest was null or undefined when calling userXAreaUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user-x-area/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserXAreaRequestToJSON(requestParameters.userXAreaRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserXAreaFromJSON(jsonValue));
    }

    /**
     */
    async userXAreaUpdate(requestParameters: UserXAreaUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserXArea> {
        const response = await this.userXAreaUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
