/* tslint:disable */
/* eslint-disable */
/**
 * Turnero TAIE API
 * API correspondiente al trabajo final \"Turnero TAIE\", realizado por los alumnos Juan Manuel Villarreal y Ghilino Ramiro
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AcademicUnit,
  AcademicUnitRequest,
  PatchedAcademicUnitRequest,
} from '../models/index';
import {
    AcademicUnitFromJSON,
    AcademicUnitToJSON,
    AcademicUnitRequestFromJSON,
    AcademicUnitRequestToJSON,
    PatchedAcademicUnitRequestFromJSON,
    PatchedAcademicUnitRequestToJSON,
} from '../models/index';

export interface AcademicUnitsCreateRequest {
    academicUnitRequest: AcademicUnitRequest;
}

export interface AcademicUnitsDestroyRequest {
    id: number;
}

export interface AcademicUnitsPartialUpdateRequest {
    id: number;
    patchedAcademicUnitRequest?: PatchedAcademicUnitRequest;
}

export interface AcademicUnitsRetrieveRequest {
    id: number;
}

export interface AcademicUnitsUpdateRequest {
    id: number;
    academicUnitRequest: AcademicUnitRequest;
}

/**
 * 
 */
export class AcademicUnitsApi extends runtime.BaseAPI {

    /**
     */
    async academicUnitsCreateRaw(requestParameters: AcademicUnitsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AcademicUnit>> {
        if (requestParameters.academicUnitRequest === null || requestParameters.academicUnitRequest === undefined) {
            throw new runtime.RequiredError('academicUnitRequest','Required parameter requestParameters.academicUnitRequest was null or undefined when calling academicUnitsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/academic-units/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AcademicUnitRequestToJSON(requestParameters.academicUnitRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcademicUnitFromJSON(jsonValue));
    }

    /**
     */
    async academicUnitsCreate(requestParameters: AcademicUnitsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AcademicUnit> {
        const response = await this.academicUnitsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async academicUnitsDestroyRaw(requestParameters: AcademicUnitsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling academicUnitsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/academic-units/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async academicUnitsDestroy(requestParameters: AcademicUnitsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.academicUnitsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async academicUnitsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AcademicUnit>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/academic-units/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AcademicUnitFromJSON));
    }

    /**
     */
    async academicUnitsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AcademicUnit>> {
        const response = await this.academicUnitsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async academicUnitsPartialUpdateRaw(requestParameters: AcademicUnitsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AcademicUnit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling academicUnitsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/academic-units/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAcademicUnitRequestToJSON(requestParameters.patchedAcademicUnitRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcademicUnitFromJSON(jsonValue));
    }

    /**
     */
    async academicUnitsPartialUpdate(requestParameters: AcademicUnitsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AcademicUnit> {
        const response = await this.academicUnitsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async academicUnitsRetrieveRaw(requestParameters: AcademicUnitsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AcademicUnit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling academicUnitsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/academic-units/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcademicUnitFromJSON(jsonValue));
    }

    /**
     */
    async academicUnitsRetrieve(requestParameters: AcademicUnitsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AcademicUnit> {
        const response = await this.academicUnitsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async academicUnitsUpdateRaw(requestParameters: AcademicUnitsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AcademicUnit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling academicUnitsUpdate.');
        }

        if (requestParameters.academicUnitRequest === null || requestParameters.academicUnitRequest === undefined) {
            throw new runtime.RequiredError('academicUnitRequest','Required parameter requestParameters.academicUnitRequest was null or undefined when calling academicUnitsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/academic-units/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AcademicUnitRequestToJSON(requestParameters.academicUnitRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcademicUnitFromJSON(jsonValue));
    }

    /**
     */
    async academicUnitsUpdate(requestParameters: AcademicUnitsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AcademicUnit> {
        const response = await this.academicUnitsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
